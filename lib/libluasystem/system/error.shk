###############################################################################
### Copyright ##################################################################
## 
## Copyright 2022 Daniel Alvarez <shogundevel@gmail.com>
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
## 
################################################################################

var ERR_NONE = 0
var ERR_UNKNOWN = 1

var ERROR = ERR_NONE

function get_err()
    return ERROR

function has_err()
    return ERROR != ERR_NONE

function set_err(value)
    ERROR = value

function clear_err()
    ERROR = ERR_NONE

var error
var pcall
var lua_pcall = pcall

function pcall_0(callee, args)
    return [lua_pcall(callee)][1]

function pcall_1(callee, args)
    return [lua_pcall(callee, args[0])][1]

function pcall_2(callee, args)
    return [lua_pcall(callee, args[0], args[1])][1]

function pcall_3(callee, args)
    return [lua_pcall(callee, args[0], args[1], args[2])][1]

function pcall_4(callee, args)
    return [lua_pcall(callee, args[0], args[1], args[2],
        args[3])][1]

function pcall_5(callee, args)
    return [lua_pcall(callee, args[0], args[1], args[2],
        args[3], args[4])][1]

function pcall_6(callee, args)
    return [lua_pcall(callee, args[0], args[1], args[2],
        args[3], args[4], args[5])][1]

function pcall_7(callee, args)
    return [lua_pcall(callee, args[0], args[1], args[2],
        args[3], args[4], args[5], args[6])][1]

var call_table = [
    pcall_0,
    pcall_1,
    pcall_2,
    pcall_3,
    pcall_4,
    pcall_5,
    pcall_6,
    pcall_7
]

function pcall(callee, args)
    if sizeof(args) >= sizeof(call_table) then
        error("too many arguments in pcall.")
    return call_table[sizeof(args)](callee, args)
