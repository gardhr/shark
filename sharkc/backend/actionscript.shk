###############################################################################
### Copyright ##################################################################
## 
## Copyright 2022 Daniel Alvarez <shogundevel@gmail.com>
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
## 
################################################################################

import system.path
import system.string: strbuf, concat, join, format
import system.io: open
import system.util

import sharkc.error: compiler_error
import sharkc.backend.javascript: javascript_generator

class actionscript_generator (javascript_generator)
    function begin_source(import_path)
        var generator = new actionscript_generator ()
        generator.compiler = self.compiler
        generator.compiler.backend = generator
        generator.parent = self
        generator.out = self.out
        generator.outfile = self.outfile
        generator.enter_module(join(".", import_path))
    
    function super_call()
        var args = ""
        if sizeof(self.call_args) != 0 then
            args = concat(", ", join(", ", self.call_args))
        self.exp = format("%.parent_class.%.call(this%)", [self.class_context, self.function_context, args])
        self.exit_call()
    
    function char_literal(value)
        self.exp = format("(%).charCodeAt(0)", [value])
